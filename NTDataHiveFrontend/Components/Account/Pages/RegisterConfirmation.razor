@using Microsoft.AspNetCore.Http.Extensions;
@using NTDataHiveFrontend.Components.Account
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using NTDataHiveFrontend.Data

@attribute [Authorize]
@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject NTDataHiveFrontend.ServiceAccess.PersonBackendService MyBackendService
@inject NavigationManager MyNavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IdentityUserAccessor UserAccessor
@inject UserManager<ApplicationUser> UserManager
@page "/Account/RegisterConfirmation"

<PageTitle>Register confirmation</PageTitle>

<h1>Register confirmation</h1>

<StatusMessage Message="@statusMessage" />

@if (emailConfirmationLink is not null)
{
    <p>
        @* This app does not currently have a real email sender registered, see <a href="https://aka.ms/aspaccountconf">these docs</a> for how to configure a real email sender. *@
        Please confirm the account: <a href="@emailConfirmationLink" style="color:chocolate;">Click here to confirm your account</a>
    </p>
}
@* else
{
    <p>Please check your email to confirm your account.</p>
} *@

@code {
    private string? emailConfirmationLink;
    private string? statusMessage;
    private string? userId;
    private NTDataHiveFrontend.Model.Person personRecord = new Model.Person();

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var nameIdentifier = auth.User;

        userId = nameIdentifier.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

        personRecord = await MyBackendService.GetPersonRecord(userId);

        if (personRecord.Type != "Admin")
        {
            MyNavigationManager.NavigateTo("/");
        }

        if (Email is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = "Error finding user for unspecified email";
        }
        else if (EmailSender is IdentityNoOpEmailSender)
        {
            // Once you add a real email sender, you should remove this code that lets you confirm the account
            var userId = await UserManager.GetUserIdAsync(user);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            emailConfirmationLink = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });
        }
    }

}
