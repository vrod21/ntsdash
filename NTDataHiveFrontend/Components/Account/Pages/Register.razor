@using Microsoft.AspNetCore.Http.Extensions;
@using NTDataHiveFrontend.Components.Account

@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using NTDataHiveFrontend.Data

@attribute [Authorize]
@inject NTDataHiveFrontend.ServiceAccess.PersonBackendService MyBackendService
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager MyNavigationManager
@inject IdentityRedirectManager RedirectManager

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IdentityUserAccessor UserAccessor
@inject UserManager<ApplicationUser> UserManager
@page "/Account/Register"


<PageTitle>Register</PageTitle>

<h1 style="text-align: center; margin-top: 30px; font-weight: bold;">Registration Form</h1>

<div class="row">
    <div class="col-md-4">
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2 class="reg-account-form">Create a New Account</h2>
            @* <ValidationSummary class="text-danger" role="alert" /> *@
            @* <hr /> *@
            <StatusMessage Message="@Message" />
            <div class="form-floating mb-3">
                <InputSelect class="form-control" @bind-Value="Input.Type">
                    @foreach (var types in Enum.GetValues(typeof(PersonType)))
                    {
                        <option value="@types">@types</option>
                    }
                </InputSelect>
                <label for="type">Type of Account</label>
                <ValidationMessage For="() => Input.Type" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.User" class="form-control" autocomplete="user" aria-required="true" />
                <label for="user">Username</label>
                <ValidationMessage For="() => Input.User" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="email" aria-required="true" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3 class="reg-clarification-page">ANOUNCEMENT</h3>
            <hr />
            @* <ExternalLoginPicker /> *@
            <RegisterClarification />
        </section>
    </div>
</div>

@code {
    private string? userId;
    private NTDataHiveFrontend.Model.Person personRecord = new Model.Person();
    private IEnumerable<IdentityError>? identityErrors;
    private NTDataHiveFrontend.Model.Person addPerson = new Model.Person();
    private ApplicationUser user = default;
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();
    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }
    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    private enum PersonType
    {
        Admin,
        Manager,
        Employee
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var nameIdentifier = auth.User;

        userId = nameIdentifier.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

        personRecord = await MyBackendService.GetPersonRecord(userId);

        if (personRecord.Type != "Admin")
        {
            MyNavigationManager.NavigateTo("/");
        }
    }

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        user.User = Input.User;
        addPerson.Username = Input.User;
        addPerson.WebId = user.Id;
        addPerson.EmailAddress = Input.Email;
        addPerson.Type = Input.Type;

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }


        Logger.LogInformation("User created a new account with password.");

        
        await MyBackendService.SavePerson(addPerson);
        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = MyNavigationManager.GetUriWithQueryParameters(
            MyNavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    protected ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(15, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 8)]
        [Display(Name = "Username")]
        public string User { get; set; } = "";

        [Required]
        [Display(Name = "Type")]
        public string Type { get; set; } = "";

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
