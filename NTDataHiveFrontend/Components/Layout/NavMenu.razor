@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Http.Extensions;
@using Microsoft.AspNetCore.Identity
@using NTDataHiveFrontend.Components.Account
@using NTDataHiveFrontend.Data

@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@implements IDisposable

@inject NavigationManager NavigationManager

@attribute [Authorize]
@inject NTDataHiveFrontend.ServiceAccess.PersonBackendService MyBackendService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IdentityUserAccessor UserAccessor
@inject UserManager<ApplicationUser> UserManager

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" style="font-size: 1.5rem;" href="/"><b>NTDataHive</b></a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                        <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
                    </NavLink>
                </div>

                @if (personRecord.Type == "Employee" && personRecord.Position == "QMS Executive - Revision" || 
                    personRecord.Type == "Employee" && personRecord.Position == "QMS Executive - Pre-Editing")
                {
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="feedback">
                            <span class="bi bi-lock-nav-menu" aria-hidden="true"></span> Create Feedback
                        </NavLink>
                    </div>
                }

                @if (personRecord.Type == "Manager" || personRecord.Type == "Employee")
                {
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="dashboard">
                            <span class="" aria-hidden="true"><RadzenIcon Icon="dashboard" /></span> Dashboard
                        </NavLink>
                    </div>
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="feedback-performance">
                            <span class="bi bi-lock-nav-menu" aria-hidden="true"></span> Performance Feedback
                        </NavLink>
                    </div>
                }

                @if (personRecord.Type == "Admin")
                {
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="Account/Register">
                            <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Register
                        </NavLink>
                    </div>
                }

                <br />
                <div class="nav-item px-3">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        @* <input type="hidden" name="ReturnUrl" value="@currentUrl" /> *@
                        <button type="submit" class="nav-link">
                            <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                        </button>
                    </form>
                </div>
            </Authorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    private string? currentUrl;
    private string? userId;

    private NTDataHiveFrontend.Model.Person personRecord = new Model.Person();

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var nameIdentifier = auth.User;

        userId = nameIdentifier.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

        personRecord = await MyBackendService.GetPersonRecord(userId);
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

