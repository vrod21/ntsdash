@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Http.Extensions;
@using Microsoft.AspNetCore.Identity
@using NTDataHiveFrontend.Components.Account
@using NTDataHiveFrontend.Data

@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization

@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IdentityUserAccessor UserAccessor
@inject UserManager<ApplicationUser> UserManager

<AuthorizeView>
    <Authorized>
        <div class="jumbotron" style="text-align:center;">
            <img src="/images/greatplacetowork.png" style="width: 650px;" />
            <hr class="my-3">
            <RadzenRow class="rz-text-align-center rz-border-info-light" Gap="1rem">
                <RadzenColumn class="rz-background-color-info-lighter rz-color-on-info-lighter rz-p-5">
                    <div class="rz-shadow-5 rz-p-3 rz-border-radius-3">
                        <div Class="rz-p-0 rz-p-md-5">
                            @userId
                        </div>
                    </div>
                </RadzenColumn>
                <RadzenColumn class="rz-background-color-info-lighter rz-color-on-info-lighter rz-p-5">
                    Column 2 of 4
                </RadzenColumn>
                <RadzenColumn class="rz-background-color-info-lighter rz-color-on-info-lighter rz-p-5">

                </RadzenColumn>
                <RadzenColumn class="rz-background-color-info-lighter rz-color-on-info-lighter rz-p-5">
                    Column 4 of 4                    
                </RadzenColumn>
            </RadzenRow>
        </div>
    </Authorized>
</AuthorizeView>


@code {
    private string? userId;

    private AuthenticationState authState;

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var nameIdentifier = auth.User;

        userId = nameIdentifier.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;        
    }
}
