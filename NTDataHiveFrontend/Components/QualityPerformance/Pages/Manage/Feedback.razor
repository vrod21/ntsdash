@using Microsoft.AspNetCore.Authorization
@using NTDataHiveEnum.DataPlugins.Utilities
@using NTDataHiveFrontend.Components.Account
@using UseCases.Dropdown.UseCaseInterfaces

@attribute [Authorize]
@rendermode InteractiveServer
@* @rendermode @(new InteractiveServerRenderMode(prerender: false)) *@
@inject NTDataHiveFrontend.ServiceAccess.EvaluationBackendService MyEvaluationBackendService
@inject NTDataHiveFrontend.ServiceAccess.PersonBackendService MyPersonBackendService
@inject IViewPublisherUseCase ViewPublisherUseCase
@inject IViewJournalIdByPublisherNameUseCase ViewJournalIdByPublisherNameUseCase
@inject IViewErrorTypeByErrorCodeNameUseCase ViewErrorTypeByErrorCodeNameUseCase
@inject IViewErrorLocationUseCase ViewErrorLocationUseCase
@inject IViewQualityAssuranceUseCase ViewQualityAssuranceUseCase
@inject IViewDepartmentUseCase ViewDepartmentUseCase
@inject IConfiguration Configuration
@inject NavigationManager MyNavigation

<style>
    form .row {
        margin-bottom: 16px;
    }
</style>

<div class="create-feedback-button">
    <RadzenButton Style="background-color: #e81f4b;" Click="@Save" Text="Create Feedback" />
</div>

<h3>Create - Feedback</h3>

<div class="container-fluid">
    <EditForm Model="addFeedback">
        <div class="row">
            <div class="col-md-6">
                <RadzenFieldset Text="QMS Feedback">
                    <div class="row">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Text="Stage" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDropDown @bind-Value="addFeedback.Stage" AllowClear="true" TValue="string" Placeholder="Stage" Data="@stage" style="width: 100%;" TextProperty="Text" ValueProperty="Value" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Text="QA Name" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDropDown @bind-Value="addFeedback.QualityAssurance" AllowClear="true" TValue="string" Placeholder="Quality Assurance"
                                            Data="@qualityAssuranceRecord" style="width: 100%;" TextProperty="Name" ValueProperty="Name" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Text="Publisher Name" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDropDown @bind-Value="addFeedback.PublisherName" AllowClear="true" TValue="string" Placeholder="Publisher Name"
                                            Data="@publisherRecord" style="width: 100%;" TextProperty="Name" ValueProperty="Name"
                                            Change="@(args => PublisherNameChangeValue(args))" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Text="Journal ID" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDropDown @bind-Value="addFeedback.JournalId" AllowClear="true" TValue="string" Placeholder="Journal Id"
                                            Data="@journalRecord" style="width: 100%;" TextProperty="JournalId" ValueProperty="JournalId"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Text="Article ID" />
                        </div>
                        <div class="col-md-8">
                            <RadzenTextBox Style="width: 100%;" @bind-value="addFeedback.ArticleId" Placeholder="Article ID" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Text="Copy Edited By" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDropDown @bind-Value="addFeedback.CopyEditedBy" AllowClear="true" TValue="string" Placeholder="Copy Edited By"
                                            Data="@copyEditedBy" style="width: 100%;"
                                            TextProperty="Text" ValueProperty="Value" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Text="Page Count" />
                        </div>
                        <div class="col-md-8">
                            <RadzenNumeric Style="width: 100%;" @bind-Value="addFeedback.PageCount" TValue="double" Placeholder="Page Count" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Text="Error Count" />
                        </div>
                        <div class="col-md-8">
                            <RadzenNumeric Style="width: 100%;" @bind-value="addFeedback.ErrorCount" TValue="double" Placeholder="Error Count" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Text="Description of Error" />
                        </div>
                        <div class="col-md-8">
                            <RadzenTextArea Style="width: 100%;" @bind-value="addFeedback.DescriptionOfError" Placeholder="Description of Error" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Text="Matter" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDropDown @bind-Value="addFeedback.Matter" AllowClear="true" TValue="string" Placeholder="FM/Non-FM"
                                            Data="@matter" style="width: 100%;"
                                            TextProperty="Text" ValueProperty="Value" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Text="Error Location" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDropDown @bind-Value="addFeedback.ErrorLocation" AllowClear="true" TValue="string" Placeholder="Error Location"
                                            Data="@errorLocationRecord" style="width: 100%;"
                                            TextProperty="Name" ValueProperty="Name" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            FilterOperator="StringFilterOperator.Contains" AllowFiltering="true" />
                        </div>
                    </div>
                </RadzenFieldset>
            </div>
            <div class="col-md-6">
                <RadzenFieldset Text="QMS Feedback">
                    <div class="row">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Text="Error Code" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDropDown @bind-Value="addFeedback.ErrorCode" AllowClear="true" TValue="string" Placeholder="Error Code"
                                            Data="@errorCode" style="width: 100%;" TextProperty="Text" ValueProperty="Value"
                                            Change="@(args => ErrorCodeNameChangeValue(args))" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            FilterOperator="StringFilterOperator.Contains" AllowFiltering="true" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Text="Error Type" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDropDown @bind-Value="addFeedback.ErrorType" AllowClear="true" TValue="string" Placeholder="Error Type"
                                            Data="@errorTypeRecord" style="width: 100%;"
                                            TextProperty="Type" ValueProperty="Type" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            FilterOperator="StringFilterOperator.Contains" AllowFiltering="true" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Text="Error SubType" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDropDown @bind-Value="addFeedback.ErrorSubtype" AllowClear="true" TValue="string" Placeholder="Error Subtype"
                                            Data="@errorSubtype" style="width: 100%;"
                                            TextProperty="Text" ValueProperty="Value" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Text="Error Category" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDropDown @bind-Value="addFeedback.ErrorCategory" AllowClear="true" TValue="string" Placeholder="Error Category"
                                            Data="@errorCategory" style="width: 100%;"
                                            TextProperty="Text" ValueProperty="Value" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Text="Introduced/Missed" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDropDown @bind-Value="addFeedback.IntroducedOrMissed" AllowClear="true" TValue="string" Placeholder="Introduced/Missed"
                                            Data="@introducedOrMissed" style="width: 100%;"
                                            TextProperty="Text" ValueProperty="Value" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Text="Department" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDropDown @bind-Value="addFeedback.Department" AllowClear="true" TValue="string" Placeholder="Department"
                                            Data="@departmentRecord" style="width: 100%;"
                                            TextProperty="Name" ValueProperty="Name" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Text="Employee Name" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDropDown @bind-Value="addFeedback.EmployeeName" AllowClear="true" TValue="string" Placeholder="Employee Name"
                                            Data="@personRecord" style="width: 100%;"
                                            TextProperty="FullName" ValueProperty="FullName" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Text="CE Level" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDropDown @bind-Value="addFeedback.CopyEditingLevel" AllowClear="true" TValue="string" Placeholder="Copy Editing Level"
                                            Data="@copyEditingLevel" style="width: 100%;"
                                            TextProperty="Text" ValueProperty="Value" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Text="Time Created" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDatePicker Style="width: 53%;" class="datepicker" @bind-Value="addFeedback.CreatedAt" YearRange="@("2023:" + @DateTime.Now.Year.ToString())"
                                              DateFormat="MM/dd/yyyy h:mm:ss tt" Placeholder="@($"{@DateTime.Now.ToLocalTime()}")" Change="@(args => PickDateOfTime())" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Text="Status of CA" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDropDown @bind-Value="addFeedback.StatusOfCA" AllowClear="true" TValue="string" Placeholder="Status of CA"
                                            Data="@status" style="width: 100%;" TextProperty="Text" ValueProperty="Value" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Text="Status of PM" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDropDown @bind-Value="addFeedback.StatusOfPM" AllowClear="true" TValue="string" Placeholder="Status of PM"
                                            Data="@status" style="width: 100%;" TextProperty="Text" ValueProperty="Value" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Text="Article Status" />
                        </div>                        
                        
                        <div class="col-md-8">                  
                            <InputFile OnChange="@LoadFiles" class="form-control" multiple accept=".png, .jpg, .jpeg" />

                            @if (errors.Count > 0)
                            {
                                <h2>Errors</h2>
                                <ul class="text-danger">
                                    @foreach (var error in errors)
                                    {
                                        <li>@error</li>
                                    }
                                </ul>
                            }
                        </div>
                    </div>
                </RadzenFieldset>
            </div>
        </div>
    </EditForm>
</div>

@code {
    private NTDataHiveFrontend.Model.Feedback addFeedback = new Model.Feedback();
    private string value = "QMS";
    private List<NTDataHiveEnum.DataPlugins.DropDownListItem> copyEditedBy = EnumHelper.ConvertEnumToDropDownSource<NTDataHiveEnum.DataPlugins.Enums.CopyEditedBy>();
    private List<NTDataHiveEnum.DataPlugins.DropDownListItem> matter = EnumHelper.ConvertEnumToDropDownSource<NTDataHiveEnum.DataPlugins.Enums.Matter>();
    private List<NTDataHiveEnum.DataPlugins.DropDownListItem> errorSubtype = EnumHelper.ConvertEnumToDropDownSource<NTDataHiveEnum.DataPlugins.Enums.ErrorSubtype>();
    private List<NTDataHiveEnum.DataPlugins.DropDownListItem> errorCategory = EnumHelper.ConvertEnumToDropDownSource<NTDataHiveEnum.DataPlugins.Enums.ErrorCategory>();
    private List<NTDataHiveEnum.DataPlugins.DropDownListItem> introducedOrMissed = EnumHelper.ConvertEnumToDropDownSource<NTDataHiveEnum.DataPlugins.Enums.IntroducedOrMissed>();
    private List<NTDataHiveEnum.DataPlugins.DropDownListItem> copyEditingLevel = EnumHelper.ConvertEnumToDropDownSource<NTDataHiveEnum.DataPlugins.Enums.CopyEditingLevel>();
    private List<NTDataHiveEnum.DataPlugins.DropDownListItem> errorCode = EnumHelper.ConvertEnumToDropDownSource<NTDataHiveEnum.DataPlugins.Enums.ErrorCode>();
    private List<NTDataHiveEnum.DataPlugins.DropDownListItem> stage = EnumHelper.ConvertEnumToDropDownSource<NTDataHiveEnum.DataPlugins.Enums.Stage>();
    private List<NTDataHiveEnum.DataPlugins.DropDownListItem> status = EnumHelper.ConvertEnumToDropDownSource<NTDataHiveEnum.DataPlugins.Enums.Status>();
    private List<NTDataHiveEnum.DataPlugins.DropDownListItem> state = EnumHelper.ConvertEnumToDropDownSource<NTDataHiveEnum.DataPlugins.Enums.State>();

    private List<CoreBusiness.Dropdown.Publisher> publisherRecord;
    private List<CoreBusiness.Dropdown.Journal> journalRecord;
    private List<CoreBusiness.Dropdown.ErrorType> errorTypeRecord;
    private List<CoreBusiness.Dropdown.ErrorLocation> errorLocationRecord;
    private List<CoreBusiness.Dropdown.QualityAssurance> qualityAssuranceRecord;
    private List<CoreBusiness.Dropdown.Department> departmentRecord;
    private List<NTDataHiveFrontend.Model.Person> personRecord = new List<Model.Person>();

    private long maxFileSize = 1024 * 1024 * 1;
    private int maxAllowedFiles = 7;
    private List<string> errors = new();

    [Parameter]
    public EventCallback<NTDataHiveFrontend.Model.Feedback> CallToAddFeedback { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        publisherRecord = ViewPublisherUseCase.Execute().ToList();
        errorLocationRecord = ViewErrorLocationUseCase.Execute().ToList();
        qualityAssuranceRecord = ViewQualityAssuranceUseCase.Execute().ToList();
        departmentRecord = ViewDepartmentUseCase.Execute().ToList();

        personRecord = await MyPersonBackendService.GetPersonByType();
    }

    private async Task Save()
    {
        addFeedback.State = value;

        await MyEvaluationBackendService.SaveFeedback(addFeedback);

        MyNavigation.NavigateTo("/feedback-performance");
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        errors.Clear();

        if (e.FileCount > maxAllowedFiles)
        {
            errors.Add($"Error: Attempting to upload {e.FileCount} files, but only {maxAllowedFiles} files are allowed.");
        }

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                string newFileName = Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(file.Name));

                string path = Path.Combine(Configuration.GetValue<string>("FileStorage"), "Image", newFileName);

                Directory.CreateDirectory(Path.Combine(Configuration.GetValue<string>("FileStorage"), "Image"));

                await using FileStream fs = new(path, FileMode.Create);

                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
            }
            catch (Exception ex)
            {
                errors.Add($"File: {file.Name} Error: {ex.Message}");
            }
        }
    }

    private void PickDateOfTime()
    {
        var value = DateTime.Now;
        addFeedback.CreatedAt = value;
        StateHasChanged();
    }

    private void PublisherNameChangeValue(Object value)
    {
        var publisherName = value.ToString();
        journalRecord = ViewJournalIdByPublisherNameUseCase.Execute(publisherName);
    }

    private void ErrorCodeNameChangeValue(Object value)
    {
        var errorCode = value.ToString();
        errorTypeRecord = ViewErrorTypeByErrorCodeNameUseCase.Execute(errorCode);
    }
}
